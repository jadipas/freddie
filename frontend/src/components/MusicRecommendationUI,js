import React, { useState, useEffect } from 'react';

const MusicRecommendationUI = () => {
  const [songs, setSongs] = useState([]);
  const [selectedSong, setSelectedSong] = useState(null);
  const [recommendations, setRecommendations] = useState([]);
  const [numRecommendations, setNumRecommendations] = useState(5);

  // Mock data for demonstration
  useEffect(() => {
    // In a real application, you would fetch this from your JSON file
    const mockSongs = [
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\BUNT. - Clouds - Clouds.mp3",
        "title": "Clouds",
        "duration": 158.82448979591837,
        "artist": "BUNT.; Nate Traveller",
        "genre": "stutter house",
        "bpm": "129"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Disclosure - Latch.mp3",
        "title": "Latch",
        "duration": 242.55,
        "artist": "Disclosure; Sam Smith",
        "genre": "electronic",
        "bpm": "122"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Dua Lipa - Don't Start Now.mp3",
        "title": "Don't Start Now",
        "duration": 183.32,
        "artist": "Dua Lipa",
        "genre": "pop",
        "bpm": "124"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Calvin Harris - Summer.mp3",
        "title": "Summer",
        "duration": 223.14,
        "artist": "Calvin Harris",
        "genre": "EDM",
        "bpm": "128"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Swedish House Mafia - Don't You Worry Child.mp3",
        "title": "Don't You Worry Child",
        "duration": 212.36,
        "artist": "Swedish House Mafia; John Martin",
        "genre": "house",
        "bpm": "128"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Avicii - Wake Me Up.mp3",
        "title": "Wake Me Up",
        "duration": 249.75,
        "artist": "Avicii; Aloe Blacc",
        "genre": "EDM",
        "bpm": "124"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\David Guetta - Titanium.mp3",
        "title": "Titanium",
        "duration": 245.12,
        "artist": "David Guetta; Sia",
        "genre": "EDM",
        "bpm": "126"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Martin Garrix - Animals.mp3",
        "title": "Animals",
        "duration": 185.09,
        "artist": "Martin Garrix",
        "genre": "EDM",
        "bpm": "128"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Kygo - Firestone.mp3",
        "title": "Firestone",
        "duration": 210.46,
        "artist": "Kygo; Conrad Sewell",
        "genre": "tropical house",
        "bpm": "120"
      },
      {
        "file_path": "C:\\Users\\jorda\\Music\\DID_I_STUTTER\\Major Lazer - Lean On.mp3",
        "title": "Lean On",
        "duration": 176.67,
        "artist": "Major Lazer; MÃ˜; DJ Snake",
        "genre": "moombahton",
        "bpm": "98"
      }
    ];
    
    setSongs(mockSongs);
  }, []);

  // Calculate song recommendations based on BPM similarity
  const calculateRecommendations = (selectedSong) => {
    if (!selectedSong) return [];
    
    const selectedBpm = parseInt(selectedSong.bpm);
    
    // Calculate BPM difference for each song
    const songsWithDifference = songs
      .filter(song => song.file_path !== selectedSong.file_path)
      .map(song => ({
        ...song,
        bpmDifference: Math.abs(parseInt(song.bpm) - selectedBpm)
      }))
      .sort((a, b) => a.bpmDifference - b.bpmDifference);
    
    // Get top N recommendations
    return songsWithDifference.slice(0, numRecommendations);
  };

  // Handle song selection
  const handleSongSelect = (song) => {
    setSelectedSong(song);
    const newRecommendations = calculateRecommendations(song);
    setRecommendations(newRecommendations);
  };

  // Format duration from seconds to MM:SS
  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  // Calculate green intensity for recommended songs
  const getRecommendationColor = (song) => {
    if (!selectedSong || song.file_path === selectedSong.file_path) return 'bg-white';
    
    const recommendedSong = recommendations.find(rec => rec.file_path === song.file_path);
    if (!recommendedSong) return 'bg-white';
    
    // Calculate color intensity based on BPM difference
    // Lower difference = more intense green
    const maxDiff = recommendations[recommendations.length - 1]?.bpmDifference || 1;
    const minDiff = recommendations[0]?.bpmDifference || 0;
    const range = maxDiff - minDiff || 1;
    const normalizedDiff = (recommendedSong.bpmDifference - minDiff) / range;
    
    // Create a color scale from intense green to light green
    if (normalizedDiff < 0.2) return 'bg-green-500';
    if (normalizedDiff < 0.4) return 'bg-green-400';
    if (normalizedDiff < 0.6) return 'bg-green-300';
    if (normalizedDiff < 0.8) return 'bg-green-200';
    return 'bg-green-100';
  };

  return (
    <div className="flex flex-col md:flex-row gap-4 p-4 h-screen">
      {/* Main song list */}
      <div className="flex-grow overflow-y-auto border rounded-lg shadow-md">
        <h2 className="p-4 text-xl font-bold border-b">Music Library</h2>
        <table className="w-full">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 text-left">Title</th>
              <th className="p-2 text-left">Duration</th>
              <th className="p-2 text-left">Artist</th>
              <th className="p-2 text-left">Genre</th>
              <th className="p-2 text-left">BPM</th>
            </tr>
          </thead>
          <tbody>
            {songs.map((song, index) => (
              <tr 
                key={index} 
                className={`hover:bg-gray-50 cursor-pointer ${getRecommendationColor(song)}`}
                onClick={() => handleSongSelect(song)}
              >
                <td className="p-2 border-t">{song.title}</td>
                <td className="p-2 border-t">{formatDuration(song.duration)}</td>
                <td className="p-2 border-t">{song.artist}</td>
                <td className="p-2 border-t">{song.genre}</td>
                <td className="p-2 border-t">{song.bpm}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Side panel for recommendations */}
      <div className="w-full md:w-64 border rounded-lg shadow-md">
        <div className="p-4 border-b">
          <h2 className="text-xl font-bold">Recommendations</h2>
          <div className="mt-2">
            <label className="block text-sm font-medium text-gray-700">
              Number of recommendations:
            </label>
            <input
              type="number"
              min="1"
              max="10"
              value={numRecommendations}
              onChange={(e) => setNumRecommendations(parseInt(e.target.value))}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
        </div>
        
        {selectedSong ? (
          <div className="p-4">
            <div className="mb-4">
              <h3 className="font-semibold">Selected Song:</h3>
              <p>{selectedSong.title} - {selectedSong.artist}</p>
              <p className="text-sm text-gray-600">BPM: {selectedSong.bpm}</p>
            </div>
            
            <h3 className="font-semibold mb-2">Top {numRecommendations} Recommendations:</h3>
            {recommendations.length > 0 ? (
              <ul className="space-y-2">
                {recommendations.map((song, index) => (
                  <li key={index} className="p-2 rounded bg-gray-50 hover:bg-gray-100">
                    <div className="font-medium">{song.title}</div>
                    <div className="text-sm text-gray-600">
                      {song.artist} - BPM: {song.bpm}
                    </div>
                    <div className="text-xs text-gray-500">
                      Difference: {song.bpmDifference} BPM
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500">No recommendations available</p>
            )}
          </div>
        ) : (
          <div className="p-4 text-gray-500">
            Click on a song to see recommendations
          </div>
        )}
      </div>
    </div>
  );
};

export default MusicRecommendationUI;